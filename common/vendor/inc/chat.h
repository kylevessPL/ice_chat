//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __chat_h__
#define __chat_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 5
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Chat
{

class ChatUser;
class ChatUserPrx;
class ChatRoom;
class ChatRoomPrx;
class ChatRoomFactory;
class ChatRoomFactoryPrx;
class ChatServer;
class ChatServerPrx;

}

namespace Chat
{

class UsernameAlreadyRegisteredException : public ::Ice::UserExceptionHelper<UsernameAlreadyRegisteredException, ::Ice::UserException>
{
public:

    virtual ~UsernameAlreadyRegisteredException();

    UsernameAlreadyRegisteredException(const UsernameAlreadyRegisteredException&) = default;

    UsernameAlreadyRegisteredException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static UsernameAlreadyRegisteredException _iceS_UsernameAlreadyRegisteredException_init;
/// \endcond

class RoomNameAlreadyRegisteredException : public ::Ice::UserExceptionHelper<RoomNameAlreadyRegisteredException, ::Ice::UserException>
{
public:

    virtual ~RoomNameAlreadyRegisteredException();

    RoomNameAlreadyRegisteredException(const RoomNameAlreadyRegisteredException&) = default;

    RoomNameAlreadyRegisteredException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class NoRoomFactoryAvailableException : public ::Ice::UserExceptionHelper<NoRoomFactoryAvailableException, ::Ice::UserException>
{
public:

    virtual ~NoRoomFactoryAvailableException();

    NoRoomFactoryAvailableException(const NoRoomFactoryAvailableException&) = default;

    NoRoomFactoryAvailableException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

using UserList = ::std::vector<::std::shared_ptr<ChatUserPrx>>;

using ChatRoomList = ::std::vector<::std::shared_ptr<ChatRoomPrx>>;

}

namespace Chat
{

class ChatUser : public virtual ::Ice::Object
{
public:

    using ProxyType = ChatUserPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(::std::shared_ptr<ChatUserPrx> from, ::std::string message, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPrivateMessage(::std::shared_ptr<ChatUserPrx> from, ::std::string message, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ChatRoom : public virtual ::Ice::Object
{
public:

    using ProxyType = ChatRoomPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(::std::shared_ptr<ChatUserPrx> from, ::std::string message, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void addUser(::std::shared_ptr<ChatUserPrx> who, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void removeUser(::std::shared_ptr<ChatUserPrx> who, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_removeUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual UserList getUsers(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ChatRoomFactory : public virtual ::Ice::Object
{
public:

    using ProxyType = ChatRoomFactoryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<ChatRoomPrx> createChatRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int numOfChatroomsRunning(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_numOfChatroomsRunning(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ChatServer : public virtual ::Ice::Object
{
public:

    using ProxyType = ChatServerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void registerUser(::std::shared_ptr<ChatUserPrx> who, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_registerUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterUser(::std::shared_ptr<ChatUserPrx> who, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ChatRoomList getRooms(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<ChatRoomPrx> createChatRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void registerChatRoomFactory(::std::shared_ptr<ChatRoomFactoryPrx> factory, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_registerChatRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterChatRoomFactory(::std::shared_ptr<ChatRoomFactoryPrx> factory, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterChatRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Chat
{

class ChatUserPrx : public virtual ::Ice::Proxy<ChatUserPrx, ::Ice::ObjectPrx>
{
public:

    void sendMessage(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatUserPrx::_iceI_sendMessage, from, message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendMessageAsync(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatUserPrx::_iceI_sendMessage, from, message, context);
    }

    ::std::function<void()>
    sendMessageAsync(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatUserPrx::_iceI_sendMessage, from, message, context);
    }

    /// \cond INTERNAL
    void _iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatUserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ChatUserPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ChatUserPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatUserPrx::_iceI_getName, context);
    }

    /// \cond INTERNAL
    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    void sendPrivateMessage(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatUserPrx::_iceI_sendPrivateMessage, from, message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendPrivateMessageAsync(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatUserPrx::_iceI_sendPrivateMessage, from, message, context);
    }

    ::std::function<void()>
    sendPrivateMessageAsync(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatUserPrx::_iceI_sendPrivateMessage, from, message, context);
    }

    /// \cond INTERNAL
    void _iceI_sendPrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatUserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ChatUserPrx() = default;
    friend ::std::shared_ptr<ChatUserPrx> IceInternal::createProxy<ChatUserPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ChatRoomPrx : public virtual ::Ice::Proxy<ChatRoomPrx, ::Ice::ObjectPrx>
{
public:

    void sendMessage(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatRoomPrx::_iceI_sendMessage, from, message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendMessageAsync(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatRoomPrx::_iceI_sendMessage, from, message, context);
    }

    ::std::function<void()>
    sendMessageAsync(const ::std::shared_ptr<ChatUserPrx>& from, const ::std::string& message,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatRoomPrx::_iceI_sendMessage, from, message, context);
    }

    /// \cond INTERNAL
    void _iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatUserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void addUser(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatRoomPrx::_iceI_addUser, who, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addUserAsync(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatRoomPrx::_iceI_addUser, who, context);
    }

    ::std::function<void()>
    addUserAsync(const ::std::shared_ptr<ChatUserPrx>& who,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatRoomPrx::_iceI_addUser, who, context);
    }

    /// \cond INTERNAL
    void _iceI_addUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatUserPrx>&, const ::Ice::Context&);
    /// \endcond

    void removeUser(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatRoomPrx::_iceI_removeUser, who, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto removeUserAsync(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatRoomPrx::_iceI_removeUser, who, context);
    }

    ::std::function<void()>
    removeUserAsync(const ::std::shared_ptr<ChatUserPrx>& who,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatRoomPrx::_iceI_removeUser, who, context);
    }

    /// \cond INTERNAL
    void _iceI_removeUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatUserPrx>&, const ::Ice::Context&);
    /// \endcond

    UserList getUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::UserList>(true, this, &ChatRoomPrx::_iceI_getUsers, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUsersAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::UserList>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::UserList, P>(false, this, &ChatRoomPrx::_iceI_getUsers, context);
    }

    ::std::function<void()>
    getUsersAsync(::std::function<void(::Chat::UserList)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::UserList>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatRoomPrx::_iceI_getUsers, context);
    }

    /// \cond INTERNAL
    void _iceI_getUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::UserList>>&, const ::Ice::Context&);
    /// \endcond

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ChatRoomPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ChatRoomPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatRoomPrx::_iceI_getName, context);
    }

    /// \cond INTERNAL
    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ChatRoomPrx() = default;
    friend ::std::shared_ptr<ChatRoomPrx> IceInternal::createProxy<ChatRoomPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ChatRoomFactoryPrx : public virtual ::Ice::Proxy<ChatRoomFactoryPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<ChatRoomPrx> createChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::ChatRoomPrx>>(true, this, &ChatRoomFactoryPrx::_iceI_createChatRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createChatRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::ChatRoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::ChatRoomPrx>, P>(false, this, &ChatRoomFactoryPrx::_iceI_createChatRoom, name, context);
    }

    ::std::function<void()>
    createChatRoomAsync(const ::std::string& name,
                        ::std::function<void(::std::shared_ptr<::Chat::ChatRoomPrx>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::ChatRoomPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatRoomFactoryPrx::_iceI_createChatRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_createChatRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::ChatRoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    int numOfChatroomsRunning(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &ChatRoomFactoryPrx::_iceI_numOfChatroomsRunning, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto numOfChatroomsRunningAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &ChatRoomFactoryPrx::_iceI_numOfChatroomsRunning, context);
    }

    ::std::function<void()>
    numOfChatroomsRunningAsync(::std::function<void(int)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatRoomFactoryPrx::_iceI_numOfChatroomsRunning, context);
    }

    /// \cond INTERNAL
    void _iceI_numOfChatroomsRunning(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ChatRoomFactoryPrx() = default;
    friend ::std::shared_ptr<ChatRoomFactoryPrx> IceInternal::createProxy<ChatRoomFactoryPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ChatServerPrx : public virtual ::Ice::Proxy<ChatServerPrx, ::Ice::ObjectPrx>
{
public:

    void registerUser(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatServerPrx::_iceI_registerUser, who, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto registerUserAsync(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatServerPrx::_iceI_registerUser, who, context);
    }

    ::std::function<void()>
    registerUserAsync(const ::std::shared_ptr<ChatUserPrx>& who,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatServerPrx::_iceI_registerUser, who, context);
    }

    /// \cond INTERNAL
    void _iceI_registerUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatUserPrx>&, const ::Ice::Context&);
    /// \endcond

    void unregisterUser(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatServerPrx::_iceI_unregisterUser, who, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto unregisterUserAsync(const ::std::shared_ptr<ChatUserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatServerPrx::_iceI_unregisterUser, who, context);
    }

    ::std::function<void()>
    unregisterUserAsync(const ::std::shared_ptr<ChatUserPrx>& who,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatServerPrx::_iceI_unregisterUser, who, context);
    }

    /// \cond INTERNAL
    void _iceI_unregisterUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatUserPrx>&, const ::Ice::Context&);
    /// \endcond

    ChatRoomList getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::ChatRoomList>(true, this, &ChatServerPrx::_iceI_getRooms, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRoomsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::ChatRoomList>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::ChatRoomList, P>(false, this, &ChatServerPrx::_iceI_getRooms, context);
    }

    ::std::function<void()>
    getRoomsAsync(::std::function<void(::Chat::ChatRoomList)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::ChatRoomList>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatServerPrx::_iceI_getRooms, context);
    }

    /// \cond INTERNAL
    void _iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::ChatRoomList>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<ChatRoomPrx> createChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::ChatRoomPrx>>(true, this, &ChatServerPrx::_iceI_createChatRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createChatRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::ChatRoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::ChatRoomPrx>, P>(false, this, &ChatServerPrx::_iceI_createChatRoom, name, context);
    }

    ::std::function<void()>
    createChatRoomAsync(const ::std::string& name,
                        ::std::function<void(::std::shared_ptr<::Chat::ChatRoomPrx>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::ChatRoomPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatServerPrx::_iceI_createChatRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_createChatRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::ChatRoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void registerChatRoomFactory(const ::std::shared_ptr<ChatRoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatServerPrx::_iceI_registerChatRoomFactory, factory, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto registerChatRoomFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatServerPrx::_iceI_registerChatRoomFactory, factory, context);
    }

    ::std::function<void()>
    registerChatRoomFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& factory,
                                 ::std::function<void()> response,
                                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                 ::std::function<void(bool)> sent = nullptr,
                                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatServerPrx::_iceI_registerChatRoomFactory, factory, context);
    }

    /// \cond INTERNAL
    void _iceI_registerChatRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatRoomFactoryPrx>&, const ::Ice::Context&);
    /// \endcond

    void unregisterChatRoomFactory(const ::std::shared_ptr<ChatRoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatServerPrx::_iceI_unregisterChatRoomFactory, factory, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto unregisterChatRoomFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatServerPrx::_iceI_unregisterChatRoomFactory, factory, context);
    }

    ::std::function<void()>
    unregisterChatRoomFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& factory,
                                   ::std::function<void()> response,
                                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                   ::std::function<void(bool)> sent = nullptr,
                                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::ChatServerPrx::_iceI_unregisterChatRoomFactory, factory, context);
    }

    /// \cond INTERNAL
    void _iceI_unregisterChatRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatRoomFactoryPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ChatServerPrx() = default;
    friend ::std::shared_ptr<ChatServerPrx> IceInternal::createProxy<ChatServerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Chat
{

using ChatUserPtr = ::std::shared_ptr<ChatUser>;
using ChatUserPrxPtr = ::std::shared_ptr<ChatUserPrx>;

using ChatRoomPtr = ::std::shared_ptr<ChatRoom>;
using ChatRoomPrxPtr = ::std::shared_ptr<ChatRoomPrx>;

using ChatRoomFactoryPtr = ::std::shared_ptr<ChatRoomFactory>;
using ChatRoomFactoryPrxPtr = ::std::shared_ptr<ChatRoomFactoryPrx>;

using ChatServerPtr = ::std::shared_ptr<ChatServer>;
using ChatServerPrxPtr = ::std::shared_ptr<ChatServerPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Chat
{

class ChatUser;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ChatUser>&);
::IceProxy::Ice::Object* upCast(ChatUser*);
/// \endcond

class ChatRoom;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ChatRoom>&);
::IceProxy::Ice::Object* upCast(ChatRoom*);
/// \endcond

class ChatRoomFactory;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ChatRoomFactory>&);
::IceProxy::Ice::Object* upCast(ChatRoomFactory*);
/// \endcond

class ChatServer;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ChatServer>&);
::IceProxy::Ice::Object* upCast(ChatServer*);
/// \endcond

}

}

namespace Chat
{

class ChatUser;
/// \cond INTERNAL
::Ice::Object* upCast(ChatUser*);
/// \endcond
typedef ::IceInternal::Handle< ChatUser> ChatUserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatUser> ChatUserPrx;
typedef ChatUserPrx ChatUserPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ChatUserPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ChatRoom;
/// \cond INTERNAL
::Ice::Object* upCast(ChatRoom*);
/// \endcond
typedef ::IceInternal::Handle< ChatRoom> ChatRoomPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatRoom> ChatRoomPrx;
typedef ChatRoomPrx ChatRoomPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ChatRoomPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ChatRoomFactory;
/// \cond INTERNAL
::Ice::Object* upCast(ChatRoomFactory*);
/// \endcond
typedef ::IceInternal::Handle< ChatRoomFactory> ChatRoomFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatRoomFactory> ChatRoomFactoryPrx;
typedef ChatRoomFactoryPrx ChatRoomFactoryPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ChatRoomFactoryPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ChatServer;
/// \cond INTERNAL
::Ice::Object* upCast(ChatServer*);
/// \endcond
typedef ::IceInternal::Handle< ChatServer> ChatServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatServer> ChatServerPrx;
typedef ChatServerPrx ChatServerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ChatServerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Chat
{

class UsernameAlreadyRegisteredException : public ::Ice::UserException
{
public:

    UsernameAlreadyRegisteredException() {}
    virtual ~UsernameAlreadyRegisteredException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual UsernameAlreadyRegisteredException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static UsernameAlreadyRegisteredException _iceS_UsernameAlreadyRegisteredException_init;
/// \endcond

class RoomNameAlreadyRegisteredException : public ::Ice::UserException
{
public:

    RoomNameAlreadyRegisteredException() {}
    virtual ~RoomNameAlreadyRegisteredException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual RoomNameAlreadyRegisteredException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class NoRoomFactoryAvailableException : public ::Ice::UserException
{
public:

    NoRoomFactoryAvailableException() {}
    virtual ~NoRoomFactoryAvailableException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NoRoomFactoryAvailableException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

typedef ::std::vector<ChatUserPrx> UserList;

typedef ::std::vector<ChatRoomPrx> ChatRoomList;

}

namespace Chat
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatUser::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_sendMessage.
 */
class Callback_ChatUser_sendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatUser_sendMessage_Base> Callback_ChatUser_sendMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatUser::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_getName.
 */
class Callback_ChatUser_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatUser_getName_Base> Callback_ChatUser_getNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_sendPrivateMessage.
 */
class Callback_ChatUser_sendPrivateMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatUser_sendPrivateMessage_Base> Callback_ChatUser_sendPrivateMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatRoom::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_sendMessage.
 */
class Callback_ChatRoom_sendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_sendMessage_Base> Callback_ChatRoom_sendMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatRoom::begin_addUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_addUser.
 */
class Callback_ChatRoom_addUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_addUser_Base> Callback_ChatRoom_addUserPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatRoom::begin_removeUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_removeUser.
 */
class Callback_ChatRoom_removeUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_removeUser_Base> Callback_ChatRoom_removeUserPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatRoom::begin_getUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_getUsers.
 */
class Callback_ChatRoom_getUsers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_getUsers_Base> Callback_ChatRoom_getUsersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatRoom::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_getName.
 */
class Callback_ChatRoom_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_getName_Base> Callback_ChatRoom_getNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatRoomFactory::begin_createChatRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoomFactory_createChatRoom.
 */
class Callback_ChatRoomFactory_createChatRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoomFactory_createChatRoom_Base> Callback_ChatRoomFactory_createChatRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatRoomFactory::begin_numOfChatroomsRunning.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoomFactory_numOfChatroomsRunning.
 */
class Callback_ChatRoomFactory_numOfChatroomsRunning_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoomFactory_numOfChatroomsRunning_Base> Callback_ChatRoomFactory_numOfChatroomsRunningPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatServer::begin_registerUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_registerUser.
 */
class Callback_ChatServer_registerUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatServer_registerUser_Base> Callback_ChatServer_registerUserPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatServer::begin_unregisterUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_unregisterUser.
 */
class Callback_ChatServer_unregisterUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatServer_unregisterUser_Base> Callback_ChatServer_unregisterUserPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatServer::begin_getRooms.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_getRooms.
 */
class Callback_ChatServer_getRooms_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatServer_getRooms_Base> Callback_ChatServer_getRoomsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatServer::begin_createChatRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_createChatRoom.
 */
class Callback_ChatServer_createChatRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatServer_createChatRoom_Base> Callback_ChatServer_createChatRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_registerChatRoomFactory.
 */
class Callback_ChatServer_registerChatRoomFactory_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatServer_registerChatRoomFactory_Base> Callback_ChatServer_registerChatRoomFactoryPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_unregisterChatRoomFactory.
 */
class Callback_ChatServer_unregisterChatRoomFactory_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatServer_unregisterChatRoomFactory_Base> Callback_ChatServer_unregisterChatRoomFactoryPtr;

}

namespace IceProxy
{

namespace Chat
{

class ChatUser : public virtual ::Ice::Proxy<ChatUser, ::IceProxy::Ice::Object>
{
public:

    void sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendMessage(_iceI_begin_sendMessage(from, message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendMessage(from, message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Chat::Callback_ChatUser_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context, const ::Chat::Callback_ChatUser_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, context, cb, cookie);
    }

    void end_sendMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendMessage(const ::Chat::ChatUserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_ChatUser_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_ChatUser_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendPrivateMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendPrivateMessage(_iceI_begin_sendPrivateMessage(from, message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendPrivateMessage(from, message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(from, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(from, message, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Chat::Callback_ChatUser_sendPrivateMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(from, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context, const ::Chat::Callback_ChatUser_sendPrivateMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(from, message, context, cb, cookie);
    }

    void end_sendPrivateMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendPrivateMessage(const ::Chat::ChatUserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ChatRoom : public virtual ::Ice::Proxy<ChatRoom, ::IceProxy::Ice::Object>
{
public:

    void sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendMessage(_iceI_begin_sendMessage(from, message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendMessage(from, message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Chat::Callback_ChatRoom_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::ChatUserPrx& from, const ::std::string& message, const ::Ice::Context& context, const ::Chat::Callback_ChatRoom_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(from, message, context, cb, cookie);
    }

    void end_sendMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendMessage(const ::Chat::ChatUserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void addUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_addUser(_iceI_begin_addUser(who, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addUser(who, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addUser(const ::Chat::ChatUserPrx& who, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addUser(who, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addUser(const ::Chat::ChatUserPrx& who, const ::Chat::Callback_ChatRoom_addUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Chat::Callback_ChatRoom_addUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addUser(who, context, cb, cookie);
    }

    void end_addUser(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addUser(const ::Chat::ChatUserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void removeUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_removeUser(_iceI_begin_removeUser(who, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_removeUser(who, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::ChatUserPrx& who, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(who, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::ChatUserPrx& who, const ::Chat::Callback_ChatRoom_removeUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Chat::Callback_ChatRoom_removeUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(who, context, cb, cookie);
    }

    void end_removeUser(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_removeUser(const ::Chat::ChatUserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::UserList getUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getUsers(_iceI_begin_getUsers(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUsers(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Chat::Callback_ChatRoom_getUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& context, const ::Chat::Callback_ChatRoom_getUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(context, cb, cookie);
    }

    ::Chat::UserList end_getUsers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUsers(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_ChatRoom_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_ChatRoom_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ChatRoomFactory : public virtual ::Ice::Proxy<ChatRoomFactory, ::IceProxy::Ice::Object>
{
public:

    ::Chat::ChatRoomPrx createChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_createChatRoom(_iceI_begin_createChatRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createChatRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Chat::Callback_ChatRoomFactory_createChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_ChatRoomFactory_createChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, context, cb, cookie);
    }

    ::Chat::ChatRoomPrx end_createChatRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createChatRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int numOfChatroomsRunning(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_numOfChatroomsRunning(_iceI_begin_numOfChatroomsRunning(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_numOfChatroomsRunning(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_numOfChatroomsRunning(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_numOfChatroomsRunning(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_numOfChatroomsRunning(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_numOfChatroomsRunning(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_numOfChatroomsRunning(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_numOfChatroomsRunning(const ::Chat::Callback_ChatRoomFactory_numOfChatroomsRunningPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_numOfChatroomsRunning(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_numOfChatroomsRunning(const ::Ice::Context& context, const ::Chat::Callback_ChatRoomFactory_numOfChatroomsRunningPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_numOfChatroomsRunning(context, cb, cookie);
    }

    ::Ice::Int end_numOfChatroomsRunning(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_numOfChatroomsRunning(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ChatServer : public virtual ::Ice::Proxy<ChatServer, ::IceProxy::Ice::Object>
{
public:

    void registerUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_registerUser(_iceI_begin_registerUser(who, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_registerUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_registerUser(who, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerUser(const ::Chat::ChatUserPrx& who, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerUser(who, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerUser(const ::Chat::ChatUserPrx& who, const ::Chat::Callback_ChatServer_registerUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Chat::Callback_ChatServer_registerUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerUser(who, context, cb, cookie);
    }

    void end_registerUser(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_registerUser(const ::Chat::ChatUserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void unregisterUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_unregisterUser(_iceI_begin_unregisterUser(who, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_unregisterUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_unregisterUser(who, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterUser(const ::Chat::ChatUserPrx& who, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterUser(who, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterUser(const ::Chat::ChatUserPrx& who, const ::Chat::Callback_ChatServer_unregisterUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterUser(who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterUser(const ::Chat::ChatUserPrx& who, const ::Ice::Context& context, const ::Chat::Callback_ChatServer_unregisterUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterUser(who, context, cb, cookie);
    }

    void end_unregisterUser(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_unregisterUser(const ::Chat::ChatUserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::ChatRoomList getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getRooms(_iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Chat::Callback_ChatServer_getRoomsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::Chat::Callback_ChatServer_getRoomsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, cb, cookie);
    }

    ::Chat::ChatRoomList end_getRooms(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRooms(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::ChatRoomPrx createChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_createChatRoom(_iceI_begin_createChatRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createChatRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Chat::Callback_ChatServer_createChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_ChatServer_createChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createChatRoom(name, context, cb, cookie);
    }

    ::Chat::ChatRoomPrx end_createChatRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createChatRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void registerChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_registerChatRoomFactory(_iceI_begin_registerChatRoomFactory(factory, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_registerChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_registerChatRoomFactory(factory, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerChatRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerChatRoomFactory(factory, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Chat::Callback_ChatServer_registerChatRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerChatRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context, const ::Chat::Callback_ChatServer_registerChatRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerChatRoomFactory(factory, context, cb, cookie);
    }

    void end_registerChatRoomFactory(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_registerChatRoomFactory(const ::Chat::ChatRoomFactoryPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void unregisterChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_unregisterChatRoomFactory(_iceI_begin_unregisterChatRoomFactory(factory, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_unregisterChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_unregisterChatRoomFactory(factory, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterChatRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterChatRoomFactory(factory, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Chat::Callback_ChatServer_unregisterChatRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterChatRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterChatRoomFactory(const ::Chat::ChatRoomFactoryPrx& factory, const ::Ice::Context& context, const ::Chat::Callback_ChatServer_unregisterChatRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterChatRoomFactory(factory, context, cb, cookie);
    }

    void end_unregisterChatRoomFactory(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_unregisterChatRoomFactory(const ::Chat::ChatRoomFactoryPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Chat
{

class ChatUser : public virtual ::Ice::Object
{
public:

    typedef ChatUserPrx ProxyType;
    typedef ChatUserPtr PointerType;

    virtual ~ChatUser();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(const ChatUserPrx& from, const ::std::string& message, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPrivateMessage(const ChatUserPrx& from, const ::std::string& message, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ChatUser& lhs, const ChatUser& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ChatUser& lhs, const ChatUser& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class ChatRoom : public virtual ::Ice::Object
{
public:

    typedef ChatRoomPrx ProxyType;
    typedef ChatRoomPtr PointerType;

    virtual ~ChatRoom();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(const ChatUserPrx& from, const ::std::string& message, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void addUser(const ChatUserPrx& who, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_addUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void removeUser(const ChatUserPrx& who, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_removeUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual UserList getUsers(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ChatRoom& lhs, const ChatRoom& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ChatRoom& lhs, const ChatRoom& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class ChatRoomFactory : public virtual ::Ice::Object
{
public:

    typedef ChatRoomFactoryPrx ProxyType;
    typedef ChatRoomFactoryPtr PointerType;

    virtual ~ChatRoomFactory();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ChatRoomPrx createChatRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int numOfChatroomsRunning(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_numOfChatroomsRunning(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ChatRoomFactory& lhs, const ChatRoomFactory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ChatRoomFactory& lhs, const ChatRoomFactory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class ChatServer : public virtual ::Ice::Object
{
public:

    typedef ChatServerPrx ProxyType;
    typedef ChatServerPtr PointerType;

    virtual ~ChatServer();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void registerUser(const ChatUserPrx& who, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_registerUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterUser(const ChatUserPrx& who, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ChatRoomList getRooms(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ChatRoomPrx createChatRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void registerChatRoomFactory(const ChatRoomFactoryPrx& factory, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_registerChatRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterChatRoomFactory(const ChatRoomFactoryPrx& factory, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterChatRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ChatServer& lhs, const ChatServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ChatServer& lhs, const ChatServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Chat::UsernameAlreadyRegisteredException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::RoomNameAlreadyRegisteredException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NoRoomFactoryAvailableException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}
/// \endcond

namespace Chat
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatUser::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_sendMessage.
 */
template<class T>
class CallbackNC_ChatUser_sendMessage : public Callback_ChatUser_sendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatUser_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatUser::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_sendMessage.
 */
template<class T, typename CT>
class Callback_ChatUser_sendMessage : public Callback_ChatUser_sendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatUser_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendMessagePtr
newCallback_ChatUser_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatUser::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_getName.
 */
template<class T>
class CallbackNC_ChatUser_getName : public Callback_ChatUser_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_ChatUser_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatUserPrx proxy = ChatUserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_getName.
 */
template<class T> Callback_ChatUser_getNamePtr
newCallback_ChatUser_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_getName.
 */
template<class T> Callback_ChatUser_getNamePtr
newCallback_ChatUser_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatUser::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_getName.
 */
template<class T, typename CT>
class Callback_ChatUser_getName : public Callback_ChatUser_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_ChatUser_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatUserPrx proxy = ChatUserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_getName.
 */
template<class T, typename CT> Callback_ChatUser_getNamePtr
newCallback_ChatUser_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_getName.
 */
template<class T, typename CT> Callback_ChatUser_getNamePtr
newCallback_ChatUser_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_sendPrivateMessage.
 */
template<class T>
class CallbackNC_ChatUser_sendPrivateMessage : public Callback_ChatUser_sendPrivateMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatUser_sendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendPrivateMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendPrivateMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendPrivateMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatUser_sendPrivateMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatUser_sendPrivateMessage.
 */
template<class T, typename CT>
class Callback_ChatUser_sendPrivateMessage : public Callback_ChatUser_sendPrivateMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatUser_sendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatUser::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_ChatUser_sendPrivateMessagePtr
newCallback_ChatUser_sendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatUser_sendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatRoom::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_sendMessage.
 */
template<class T>
class CallbackNC_ChatRoom_sendMessage : public Callback_ChatRoom_sendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoom_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatRoom::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_sendMessage.
 */
template<class T, typename CT>
class Callback_ChatRoom_sendMessage : public Callback_ChatRoom_sendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoom_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_sendMessage.
 */
template<class T, typename CT> Callback_ChatRoom_sendMessagePtr
newCallback_ChatRoom_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatRoom::begin_addUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_addUser.
 */
template<class T>
class CallbackNC_ChatRoom_addUser : public Callback_ChatRoom_addUser_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoom_addUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_addUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_addUser<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_addUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_addUser<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatRoom::begin_addUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_addUser.
 */
template<class T, typename CT>
class Callback_ChatRoom_addUser : public Callback_ChatRoom_addUser_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoom_addUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T, typename CT> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_addUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T, typename CT> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_addUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T, typename CT> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_addUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_addUser.
 */
template<class T, typename CT> Callback_ChatRoom_addUserPtr
newCallback_ChatRoom_addUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_addUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatRoom::begin_removeUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_removeUser.
 */
template<class T>
class CallbackNC_ChatRoom_removeUser : public Callback_ChatRoom_removeUser_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoom_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_removeUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_removeUser<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_removeUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_removeUser<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatRoom::begin_removeUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_removeUser.
 */
template<class T, typename CT>
class Callback_ChatRoom_removeUser : public Callback_ChatRoom_removeUser_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoom_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T, typename CT> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_removeUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T, typename CT> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_removeUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T, typename CT> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_removeUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_removeUser.
 */
template<class T, typename CT> Callback_ChatRoom_removeUserPtr
newCallback_ChatRoom_removeUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_removeUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatRoom::begin_getUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_getUsers.
 */
template<class T>
class CallbackNC_ChatRoom_getUsers : public Callback_ChatRoom_getUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const UserList&);

    CallbackNC_ChatRoom_getUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        UserList ret;
        try
        {
            ret = proxy->end_getUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getUsers.
 */
template<class T> Callback_ChatRoom_getUsersPtr
newCallback_ChatRoom_getUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_getUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getUsers.
 */
template<class T> Callback_ChatRoom_getUsersPtr
newCallback_ChatRoom_getUsers(T* instance, void (T::*cb)(const UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_getUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatRoom::begin_getUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_getUsers.
 */
template<class T, typename CT>
class Callback_ChatRoom_getUsers : public Callback_ChatRoom_getUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const UserList&, const CT&);

    Callback_ChatRoom_getUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        UserList ret;
        try
        {
            ret = proxy->end_getUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getUsers.
 */
template<class T, typename CT> Callback_ChatRoom_getUsersPtr
newCallback_ChatRoom_getUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_getUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getUsers.
 */
template<class T, typename CT> Callback_ChatRoom_getUsersPtr
newCallback_ChatRoom_getUsers(T* instance, void (T::*cb)(const UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_getUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatRoom::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_getName.
 */
template<class T>
class CallbackNC_ChatRoom_getName : public Callback_ChatRoom_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_ChatRoom_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getName.
 */
template<class T> Callback_ChatRoom_getNamePtr
newCallback_ChatRoom_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getName.
 */
template<class T> Callback_ChatRoom_getNamePtr
newCallback_ChatRoom_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatRoom::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoom_getName.
 */
template<class T, typename CT>
class Callback_ChatRoom_getName : public Callback_ChatRoom_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_ChatRoom_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getName.
 */
template<class T, typename CT> Callback_ChatRoom_getNamePtr
newCallback_ChatRoom_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoom::begin_getName.
 */
template<class T, typename CT> Callback_ChatRoom_getNamePtr
newCallback_ChatRoom_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatRoomFactory::begin_createChatRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoomFactory_createChatRoom.
 */
template<class T>
class CallbackNC_ChatRoomFactory_createChatRoom : public Callback_ChatRoomFactory_createChatRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ChatRoomPrx&);

    CallbackNC_ChatRoomFactory_createChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomFactoryPrx proxy = ChatRoomFactoryPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_createChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_createChatRoom.
 */
template<class T> Callback_ChatRoomFactory_createChatRoomPtr
newCallback_ChatRoomFactory_createChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomFactory_createChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_createChatRoom.
 */
template<class T> Callback_ChatRoomFactory_createChatRoomPtr
newCallback_ChatRoomFactory_createChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomFactory_createChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatRoomFactory::begin_createChatRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoomFactory_createChatRoom.
 */
template<class T, typename CT>
class Callback_ChatRoomFactory_createChatRoom : public Callback_ChatRoomFactory_createChatRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ChatRoomPrx&, const CT&);

    Callback_ChatRoomFactory_createChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomFactoryPrx proxy = ChatRoomFactoryPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_createChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_createChatRoom.
 */
template<class T, typename CT> Callback_ChatRoomFactory_createChatRoomPtr
newCallback_ChatRoomFactory_createChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomFactory_createChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_createChatRoom.
 */
template<class T, typename CT> Callback_ChatRoomFactory_createChatRoomPtr
newCallback_ChatRoomFactory_createChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomFactory_createChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatRoomFactory::begin_numOfChatroomsRunning.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoomFactory_numOfChatroomsRunning.
 */
template<class T>
class CallbackNC_ChatRoomFactory_numOfChatroomsRunning : public Callback_ChatRoomFactory_numOfChatroomsRunning_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ChatRoomFactory_numOfChatroomsRunning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomFactoryPrx proxy = ChatRoomFactoryPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_numOfChatroomsRunning(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_numOfChatroomsRunning.
 */
template<class T> Callback_ChatRoomFactory_numOfChatroomsRunningPtr
newCallback_ChatRoomFactory_numOfChatroomsRunning(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomFactory_numOfChatroomsRunning<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_numOfChatroomsRunning.
 */
template<class T> Callback_ChatRoomFactory_numOfChatroomsRunningPtr
newCallback_ChatRoomFactory_numOfChatroomsRunning(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomFactory_numOfChatroomsRunning<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatRoomFactory::begin_numOfChatroomsRunning.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatRoomFactory_numOfChatroomsRunning.
 */
template<class T, typename CT>
class Callback_ChatRoomFactory_numOfChatroomsRunning : public Callback_ChatRoomFactory_numOfChatroomsRunning_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ChatRoomFactory_numOfChatroomsRunning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomFactoryPrx proxy = ChatRoomFactoryPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_numOfChatroomsRunning(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_numOfChatroomsRunning.
 */
template<class T, typename CT> Callback_ChatRoomFactory_numOfChatroomsRunningPtr
newCallback_ChatRoomFactory_numOfChatroomsRunning(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomFactory_numOfChatroomsRunning<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatRoomFactory::begin_numOfChatroomsRunning.
 */
template<class T, typename CT> Callback_ChatRoomFactory_numOfChatroomsRunningPtr
newCallback_ChatRoomFactory_numOfChatroomsRunning(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomFactory_numOfChatroomsRunning<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatServer::begin_registerUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_registerUser.
 */
template<class T>
class CallbackNC_ChatServer_registerUser : public Callback_ChatServer_registerUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatServer_registerUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatServerPrx proxy = ChatServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_registerUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerUser<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerUser<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatServer::begin_registerUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_registerUser.
 */
template<class T, typename CT>
class Callback_ChatServer_registerUser : public Callback_ChatServer_registerUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatServer_registerUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatServerPrx proxy = ChatServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_registerUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T, typename CT> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T, typename CT> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T, typename CT> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerUser.
 */
template<class T, typename CT> Callback_ChatServer_registerUserPtr
newCallback_ChatServer_registerUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatServer::begin_unregisterUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_unregisterUser.
 */
template<class T>
class CallbackNC_ChatServer_unregisterUser : public Callback_ChatServer_unregisterUser_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatServer_unregisterUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterUser<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterUser<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatServer::begin_unregisterUser.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_unregisterUser.
 */
template<class T, typename CT>
class Callback_ChatServer_unregisterUser : public Callback_ChatServer_unregisterUser_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatServer_unregisterUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T, typename CT> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T, typename CT> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T, typename CT> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterUser.
 */
template<class T, typename CT> Callback_ChatServer_unregisterUserPtr
newCallback_ChatServer_unregisterUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterUser<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatServer::begin_getRooms.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_getRooms.
 */
template<class T>
class CallbackNC_ChatServer_getRooms : public Callback_ChatServer_getRooms_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ChatRoomList&);

    CallbackNC_ChatServer_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatServerPrx proxy = ChatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomList ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_getRooms.
 */
template<class T> Callback_ChatServer_getRoomsPtr
newCallback_ChatServer_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_getRooms<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_getRooms.
 */
template<class T> Callback_ChatServer_getRoomsPtr
newCallback_ChatServer_getRooms(T* instance, void (T::*cb)(const ChatRoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_getRooms<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatServer::begin_getRooms.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_getRooms.
 */
template<class T, typename CT>
class Callback_ChatServer_getRooms : public Callback_ChatServer_getRooms_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ChatRoomList&, const CT&);

    Callback_ChatServer_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatServerPrx proxy = ChatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomList ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_getRooms.
 */
template<class T, typename CT> Callback_ChatServer_getRoomsPtr
newCallback_ChatServer_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_getRooms<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_getRooms.
 */
template<class T, typename CT> Callback_ChatServer_getRoomsPtr
newCallback_ChatServer_getRooms(T* instance, void (T::*cb)(const ChatRoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_getRooms<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatServer::begin_createChatRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_createChatRoom.
 */
template<class T>
class CallbackNC_ChatServer_createChatRoom : public Callback_ChatServer_createChatRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ChatRoomPrx&);

    CallbackNC_ChatServer_createChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatServerPrx proxy = ChatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_createChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_createChatRoom.
 */
template<class T> Callback_ChatServer_createChatRoomPtr
newCallback_ChatServer_createChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_createChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_createChatRoom.
 */
template<class T> Callback_ChatServer_createChatRoomPtr
newCallback_ChatServer_createChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_createChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatServer::begin_createChatRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_createChatRoom.
 */
template<class T, typename CT>
class Callback_ChatServer_createChatRoom : public Callback_ChatServer_createChatRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ChatRoomPrx&, const CT&);

    Callback_ChatServer_createChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatServerPrx proxy = ChatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_createChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_createChatRoom.
 */
template<class T, typename CT> Callback_ChatServer_createChatRoomPtr
newCallback_ChatServer_createChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_createChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_createChatRoom.
 */
template<class T, typename CT> Callback_ChatServer_createChatRoomPtr
newCallback_ChatServer_createChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_createChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_registerChatRoomFactory.
 */
template<class T>
class CallbackNC_ChatServer_registerChatRoomFactory : public Callback_ChatServer_registerChatRoomFactory_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatServer_registerChatRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerChatRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerChatRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerChatRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_registerChatRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_registerChatRoomFactory.
 */
template<class T, typename CT>
class Callback_ChatServer_registerChatRoomFactory : public Callback_ChatServer_registerChatRoomFactory_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatServer_registerChatRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerChatRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerChatRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerChatRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_registerChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_registerChatRoomFactoryPtr
newCallback_ChatServer_registerChatRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_registerChatRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_unregisterChatRoomFactory.
 */
template<class T>
class CallbackNC_ChatServer_unregisterChatRoomFactory : public Callback_ChatServer_unregisterChatRoomFactory_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatServer_unregisterChatRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterChatRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterChatRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterChatRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatServer_unregisterChatRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_ChatServer_unregisterChatRoomFactory.
 */
template<class T, typename CT>
class Callback_ChatServer_unregisterChatRoomFactory : public Callback_ChatServer_unregisterChatRoomFactory_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatServer_unregisterChatRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterChatRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterChatRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterChatRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::ChatServer::begin_unregisterChatRoomFactory.
 */
template<class T, typename CT> Callback_ChatServer_unregisterChatRoomFactoryPtr
newCallback_ChatServer_unregisterChatRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatServer_unregisterChatRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
